using System;
using System.Collections.ObjectModel;
using System.Globalization;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Shapes;
using GraphBuilder.Shell.Common;
using GraphBuilder.Shell.Models;
using GraphBuilder.Shell.Views;

namespace GraphBuilder.Shell.ViewModels
{
    public class DocumentViewModel :  DockWindowViewModel
    {
        public DocumentViewModel()
        {
            Init();
        }

        private MapZoom zoom;
        private Pan pan;
        RectangleSelectionGesture rectZoom;
        AutoScroll autoScroll;

        public VirtualCanvas VirtualCanvas { get; private set; }

        private void Init()
        {
            VirtualCanvas = new VirtualCanvas();
            ContentControl.Content = VirtualCanvas;

            Canvas target = VirtualCanvas.ContentCanvas;
            zoom = new MapZoom(target);
            pan = new Pan(target, zoom);
            rectZoom = new RectangleSelectionGesture(target, zoom, ModifierKeys.Control);
            rectZoom.ZoomSelection = true;
            autoScroll = new AutoScroll(target, zoom);
            zoom.ZoomChanged += new EventHandler(OnZoomChanged);

            VirtualCanvas.VisualsChanged += new EventHandler<VisualChangeEventArgs>(OnVisualsChanged);
            //ZoomSlider.ValueChanged += new RoutedPropertyChangedEventHandler<double>(OnZoomSliderValueChanged);

            VirtualCanvas.Scale.Changed += new EventHandler(OnScaleChanged);
            VirtualCanvas.Translate.Changed += new EventHandler(OnScaleChanged);

            VirtualCanvas.Background = new SolidColorBrush(Color.FromRgb(0xd0, 0xd0, 0xd0));
            VirtualCanvas.ContentCanvas.Background = Brushes.White;

        }

        void OnScaleChanged(object sender, EventArgs e)
        {
            // Make the grid lines get thinner as you zoom in
            //double t = _gridLines.StrokeThickness = 0.1 / grid.Scale.ScaleX;
            //grid.Backdrop.BorderThickness = new Thickness(t);
        }

        private void OnZoomChanged(object sender, EventArgs e)
        {
            //if (ZoomSlider.Value != zoom.Zoom)
            //{
            //    ZoomSlider.Value = zoom.Zoom;
            //}
        }

        private void OnVisualsChanged(object sender, VisualChangeEventArgs e)
        {
            //if (_animateStatus)
            //{
            //    StatusText.Text = string.Format(CultureInfo.InvariantCulture, "{0} live visuals of {1} total", grid.LiveVisualCount, _totalVisuals);

            //    int tick = Environment.TickCount;
            //    if (e.Added != 0 || e.Removed != 0)
            //    {
            //        addedPerSecond += e.Added;
            //        removedPerSecond += e.Removed;
            //        if (tick > lastTick + 100)
            //        {
            //            Created.BeginAnimation(Rectangle.WidthProperty, new DoubleAnimation(
            //                Math.Min(addedPerSecond, 450),
            //                new Duration(TimeSpan.FromMilliseconds(100))));
            //            CreatedLabel.Text = addedPerSecond.ToString(CultureInfo.InvariantCulture) + " created";
            //            addedPerSecond = 0;

            //            Destroyed.BeginAnimation(Rectangle.WidthProperty, new DoubleAnimation(
            //                Math.Min(removedPerSecond, 450),
            //                new Duration(TimeSpan.FromMilliseconds(100))));
            //            DestroyedLabel.Text = removedPerSecond.ToString(CultureInfo.InvariantCulture) + " disposed";
            //            removedPerSecond = 0;
            //        }
            //    }
            //    if (tick > lastTick + 1000)
            //    {
            //        lastTick = tick;
            //    }
            //}
        }

        private ContentControl _contentControl = new ContentControl();

        public ContentControl ContentControl
        {
            get
            {
                return _contentControl;
            }
            set
            {
                _contentControl = value;
                OnPropertyChanged("ContentControl");
            }
        }
        
        private DelegateCommand _openDocument;

        public ICommand OpenDocument
        {
            get
            {
                if (_openDocument == null)
                {
                    _openDocument = new DelegateCommand(OnOpenDocument);
                }
                return _openDocument;
            }
        }

        public void OnOpenDocument()
        {
            MessageBox.Show("OnOpenDocument");
        }
    }
}